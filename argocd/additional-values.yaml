global:
  domain: cd.kentaro1043.com

controller:
  replicas: 1

server:
  replicas: 2
  certificate:
    enabled: false
    issuer:
      name: http-01-issuer
      kind: ClusterIssuer
  ingress:
    enabled: false
    ingressClassName: traefik
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    tls: true

applicationSet:
  replicas: 2

redis-ha:
  enabled: true

### ksops configuration
### https://github.com/viaduct-ai/kustomize-sops#argo-cd-helm-chart-with-custom-tooling
# Enable Kustomize Alpha Plugins via Argo CD ConfigMap, required for ksops
configs:
  params:
    server.insecure: true
  cm:
    # ksops
    kustomize.buildOptions: "--enable-alpha-plugins --enable-exec --enable-helm"

    # helm-secrets
    helm.valuesFileSchemes: >-
      secrets+gpg-import, secrets+gpg-import-kubernetes,
      secrets+age-import, secrets+age-import-kubernetes,
      secrets,secrets+literal,
      https

repoServer:
  replicas: 2
  env:
    # ksops & helm-secrets
    - name: XDG_CONFIG_HOME
      value: /.config
    - name: SOPS_AGE_KEY_FILE
      value: /.config/sops/age/keys.txt

    # helm-secrets
    - name: HELM_PLUGINS
      value: /gitops-tools/helm-plugins/
    - name: HELM_SECRETS_CURL_PATH
      value: /gitops-tools/curl
    - name: HELM_SECRETS_SOPS_PATH
      value: /gitops-tools/sops
    - name: HELM_SECRETS_VALS_PATH
      value: /gitops-tools/vals
    - name: HELM_SECRETS_KUBECTL_PATH
      value: /gitops-tools/kubectl
    - name: HELM_SECRETS_BACKEND
      value: sops
    # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
    - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
      value: "true"
    - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
      value: "false"
    - name: HELM_SECRETS_WRAPPER_ENABLED
      value: "true"
    - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
      value: "true"
    - name: HELM_SECRETS_HELM_PATH
      value: /usr/local/bin/helm

  # Use init containers to configure custom tooling
  # https://argoproj.github.io/argo-cd/operator-manual/custom_tools/
  volumes:
    # ksops & helm-secrets
    - name: custom-tools
      emptyDir: {}
    - name: sops-age
      secret:
        secretName: sops-age

    # helm-secrets
    - name: gitops-tools
      emptyDir: {}

  initContainers:
    # ksops installation
    - name: install-ksops
      image: viaductoss/ksops
      command: ["/bin/sh", "-c"]
      args:
        - echo "Installing KSOPS...";
          mv ksops /custom-tools/;
          mv kustomize /custom-tools/;
          echo "Done.";
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools

    # helm-secrets installation
    - name: download-tools
      image: alpine:latest
      imagePullPolicy: IfNotPresent
      command: [sh, -ec]
      env:
        - name: HELM_SECRETS_VERSION
          value: "4.6.3"
        - name: KUBECTL_VERSION
          value: "1.31.4"
        - name: VALS_VERSION
          value: "0.40.1"
        - name: SOPS_VERSION
          value: "3.10.2"
      args:
        - |
          mkdir -p /gitops-tools/helm-plugins

          GO_ARCH=$(uname -m | sed -e 's/x86_64/amd64/')
          wget -qO /gitops-tools/curl https://github.com/moparisthebest/static-curl/releases/latest/download/curl-${GO_ARCH}

          GO_ARCH=$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/') && \
          wget -qO /gitops-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/${GO_ARCH}/kubectl
          wget -qO /gitops-tools/sops https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.${GO_ARCH}
          wget -qO- https://github.com/helmfile/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_${GO_ARCH}.tar.gz | tar zxv -C /gitops-tools vals
          wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /gitops-tools/helm-plugins -xzf-

          chmod +x /gitops-tools/*
          cp /gitops-tools/helm-plugins/helm-secrets/scripts/wrapper/helm.sh /gitops-tools/helm
      volumeMounts:
        - mountPath: /gitops-tools
          name: gitops-tools

  volumeMounts:
    # kustomize
    - mountPath: /usr/local/bin/kustomize
      name: custom-tools
      subPath: kustomize

    # ksops
    - mountPath: /usr/local/bin/ksops
      name: custom-tools
      subPath: ksops

    # helm-secrets
    - mountPath: /gitops-tools
      name: gitops-tools
    - mountPath: /usr/local/sbin/helm
      subPath: helm
      name: gitops-tools

    # sops key for ksops & helm-secrets
    - mountPath: /.config/sops/age
      name: sops-age

notifications:
  secret:
    create: false
  notifiers:
    service.webhook.discord: |
      url: $discord-webhook-url

  subscriptions:
    - recipients:
        - discord
      selector: skip-default-notification!=true
      triggers:
        - on-created
        - on-deleted
        - on-deployed
        - on-health-degraded
        - on-sync-failed
        - on-sync-running
        - on-sync-status-unknown

  templates:
    app-created: |
      webhook:
        discord:
          method: POST
          body: |
            üéâ [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Created üéâ
    app-deleted: |
      webhook:
        discord:
          method: POST
          body: |
            üî• [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Deleted üî•
    app-deployed: |
      webhook:
        discord:
          method: POST
          body: |
            üöÄ [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) for [`{{ substr 0 7 .app.status.sync.revision }}`](//github.com/Kentaro1043/manifest/commit/{{ .app.status.sync.revision }}) Deployed üöÄ
    app-health-degraded: |
      webhook:
        discord:
          method: POST
          body: |
            üöëÔ∏è [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Degraded üöëÔ∏è
    app-sync-failed: |
      webhook:
        discord:
          method: POST
          body: |
            ‚ùó [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Sync Failed ‚ùó
    app-sync-running: |
      webhook:
        discord:
          method: POST
          body: |
            üöß [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Syncing üöß
    app-sync-status-unknown: |
      webhook:
        discord:
          method: POST
          body: |
            ‚ùìÔ∏è [{{.app.metadata.name}}]({{.context.argocdUrl}}/applications/{{.app.metadata.name}}) Sync Status Unknown ‚ùìÔ∏è

  # ref: https://github.com/argoproj/argo-cd/blob/master/notifications_catalog/install.yaml
  trigger:
    on-created: |
      - description: Application is created.
        oncePer: app.metadata.name
        send:
        - app-created
        when: "true"
    on-deleted: |
      - description: Application is deleted.
        oncePer: app.metadata.name
        send:
        - app-deleted
        when: app.metadata.deletionTimestamp != nil
    on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.operationState?.syncResult?.revision
        send:
        - app-deployed
        when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
          and app.status.health.status == 'Healthy' and (!time.Parse(app.status.health.lastTransitionTime).Add(1
          * time.Minute).Before(time.Parse(app.status.operationState.finishedAt)) or time.Parse(app.status.health.lastTransitionTime).Before(time.Parse(app.status.operationState.startedAt)))
    on-health-degraded: |
      - description: Application has degraded
        oncePer: app.status.operationState?.syncResult?.revision
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    on-sync-failed: |
      - description: Application syncing has failed
        oncePer: app.status.operationState?.syncResult?.revision
        send:
        - app-sync-failed
        when: app.status.operationState != nil and app.status.operationState.phase in ['Error',
          'Failed']
    on-sync-running: |
      - description: Application is being synced
        oncePer: app.status.operationState?.syncResult?.revision
        send:
        - app-sync-running
        when: app.status.operationState != nil and app.status.operationState.phase in ['Running']
    on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        oncePer: app.status.operationState?.syncResult?.revision
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    on-sync-succeeded: |
      - description: Application syncing has succeeded
        oncePer: app.status.operationState?.syncResult?.revision
        send:
        - app-sync-succeeded
        when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
